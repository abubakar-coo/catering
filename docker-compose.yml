version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: catering-postgres
    environment:
      POSTGRES_DB: catering_db
      POSTGRES_USER: catering_user
      POSTGRES_PASSWORD: catering_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - catering-network
    restart: unless-stopped

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: catering-backend
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://catering_user:catering_password@postgres:5432/catering_db?schema=public
      - JWT_SECRET=your-super-secret-jwt-key-change-this-in-production
      - JWT_REFRESH_SECRET=your-super-secret-refresh-key-change-this-in-production
      - FRONTEND_URL=http://localhost:3000
      - SMTP_HOST=smtp.gmail.com
      - SMTP_PORT=587
      - SMTP_USER=your-email@gmail.com
      - SMTP_PASS=your-app-password
      - EMAIL_FROM=your-email@gmail.com
    ports:
      - "5000:5000"
    depends_on:
      - postgres
    networks:
      - catering-network
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/qr_codes:/app/qr_codes
      - ./backend/logs:/app/logs
    restart: unless-stopped

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: catering-frontend
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:5000/api
      - NEXT_PUBLIC_SOCKET_URL=http://localhost:5000
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - catering-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: catering-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - catering-network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  catering-network:
    driver: bridge
